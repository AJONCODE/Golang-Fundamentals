package main

import (
	"fmt"
	"math/rand"
	"sync"
)

const numFactorials = 100
const rdLimit = 20

func main() {
	var w sync.WaitGroup
	w.Add(numFactorials)
	factorial(&w)
	w.Wait()
}

func factorial(wmain *sync.WaitGroup) {
	var w sync.WaitGroup
	rand.Seed(42)

	w.Add(numFactorials + 1)

	for j := 1; j <= numFactorials; j++ {

		go func() {
			f := rand.Intn(rdLimit)
			w.Wait()
			total := 1
			for i := f; i > 0; i-- {

				total *= i
			}
			fmt.Println(f, total)
			(*wmain).Done()
			//out <- total

		}()
		w.Done()
	}
	fmt.Println("All done with initialization")
	w.Done()

}

/*
We used the sync package to create a solution that will accomplish our goal.
*/

// go run -race main.go
// All done with initialization
// 8 40320
// 15 1307674368000
// 7 5040
// 12 479001600
// 8 40320
// 12 479001600
// 10 3628800
// 13 6227020800
// 5 120
// 15 1307674368000
// 17 355687428096000
// 1 1
// 2 2
// 8 40320
// 15 1307674368000
// 3 6
// 9 362880
// 1 1
// 7 5040
// 9 362880
// 7 5040
// 18 6402373705728000
// 4 24
// 0 1
// 9 362880
// 12 479001600
// 12 479001600
// 14 87178291200
// 12 479001600
// 4 24
// 10 3628800
// 3 6
// 9 362880
// 11 39916800
// 19 121645100408832000
// 18 6402373705728000
// 14 87178291200
// 14 87178291200
// 10 3628800
// 15 1307674368000
// 16 20922789888000
// 18 6402373705728000
// 8 40320
// 14 87178291200
// 3 6
// 2 2
// 11 39916800
// 18 6402373705728000
// 4 24
// 19 121645100408832000
// 7 5040
// 2 2
// 16 20922789888000
// 11 39916800
// 18 6402373705728000
// 6 720
// 1 1
// 6 720
// 15 1307674368000
// 4 24
// 7 5040
// 19 121645100408832000
// 13 6227020800
// 7 5040
// 18 6402373705728000
// 6 720
// 15 1307674368000
// 2 2
// 15 1307674368000
// 19 121645100408832000
// 7 5040
// 15 1307674368000
// 6 720
// 3 6
// 0 1
// 3 6
// 2 2
// 4 24
// 12 479001600
// 12 479001600
// 5 120
// 3 6
// 6 720
// 11 39916800
// 7 5040
